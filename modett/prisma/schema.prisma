generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["product_catalog", "public", "user_management", "cart"]
}

model User {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @map("user_id") @db.Uuid
  email          String          @unique
  passwordHash   String?         @map("password_hash")
  phone          String?
  status         UserStatus      @default(active)
  emailVerified  Boolean         @default(false) @map("email_verified")
  phoneVerified  Boolean         @default(false) @map("phone_verified")
  isGuest        Boolean         @default(false) @map("is_guest")
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  paymentMethods PaymentMethod[]
  socialLogins   SocialLogin[]
  addresses      UserAddress[]
  profile        UserProfile?
  shoppingCarts  ShoppingCart[]

  @@map("users")
  @@schema("user_management")
}

model SocialLogin {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @map("social_id") @db.Uuid
  userId         String   @map("user_id") @db.Uuid
  provider       String
  providerUserId String   @unique @map("provider_user_id")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("social_logins")
  @@schema("user_management")
}

model UserAddress {
  id                  String          @id @default(dbgenerated("gen_random_uuid()")) @map("address_id") @db.Uuid
  userId              String          @map("user_id") @db.Uuid
  type                String
  isDefault           Boolean         @default(false) @map("is_default")
  firstName           String?         @map("first_name")
  lastName            String?         @map("last_name")
  company             String?
  addressLine1        String          @map("address_line_1")
  addressLine2        String?         @map("address_line_2")
  city                String
  state               String?
  postalCode          String?         @map("postal_code")
  country             String
  phone               String?
  createdAt           DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  paymentMethods      PaymentMethod[]
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  defaultUserProfiles UserProfile[]   @relation("DefaultAddress")

  @@map("user_addresses")
  @@schema("user_management")
}

model PaymentMethod {
  id                  String        @id @default(dbgenerated("gen_random_uuid()")) @map("payment_method_id") @db.Uuid
  userId              String        @map("user_id") @db.Uuid
  type                String
  brand               String?
  last4               String?
  expMonth            Int?          @map("exp_month")
  expYear             Int?          @map("exp_year")
  billingAddressId    String?       @map("billing_address_id") @db.Uuid
  providerRef         String?       @map("provider_ref")
  isDefault           Boolean       @default(false) @map("is_default")
  createdAt           DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  billingAddress      UserAddress?  @relation(fields: [billingAddressId], references: [id], onUpdate: NoAction)
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  defaultUserProfiles UserProfile[] @relation("DefaultPaymentMethod")

  @@map("payment_methods")
  @@schema("user_management")
}

model UserProfile {
  userId                 String         @id @map("user_id") @db.Uuid
  defaultAddressId       String?        @map("default_address_id") @db.Uuid
  defaultPaymentMethodId String?        @map("default_payment_method_id") @db.Uuid
  prefs                  Json           @default("{}")
  locale                 String?
  currency               String?
  stylePreferences       Json           @default("{}") @map("style_preferences")
  preferredSizes         Json           @default("{}") @map("preferred_sizes")
  defaultAddress         UserAddress?   @relation("DefaultAddress", fields: [defaultAddressId], references: [id], onUpdate: NoAction)
  defaultPaymentMethod   PaymentMethod? @relation("DefaultPaymentMethod", fields: [defaultPaymentMethodId], references: [id], onUpdate: NoAction)
  user                   User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("user_profiles")
  @@schema("user_management")
}

model Product {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @map("product_id") @db.Uuid
  title                 String
  slug                  String                  @unique
  brand                 String?
  shortDesc             String?                 @map("short_desc")
  longDescHtml          String?                 @map("long_desc_html")
  status                ProductStatusEnum       @default(draft)
  publishAt             DateTime?               @map("publish_at") @db.Timestamptz(6)
  countryOfOrigin       String?                 @map("country_of_origin")
  seoTitle              String?                 @map("seo_title")
  seoDescription        String?                 @map("seo_description")
  createdAt             DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime                @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  editorialLookProducts EditorialLookProduct[]
  categories            ProductCategory[]
  media                 ProductMedia[]
  tags                  ProductTagAssociation[]
  variants              ProductVariant[]

  @@index([publishAt], map: "idx_products_publish_at")
  @@index([status], map: "idx_products_status")
  @@map("products")
  @@schema("product_catalog")
}

model ProductVariant {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @map("variant_id") @db.Uuid
  productId      String         @map("product_id") @db.Uuid
  sku            String         @unique
  size           String?
  color          String?
  barcode        String?
  price          Decimal        @db.Decimal(12, 2)
  compareAtPrice Decimal?       @map("compare_at_price") @db.Decimal(12, 2)
  weightG        Int?           @map("weight_g")
  dims           Json?
  taxClass       String?        @map("tax_class")
  allowBackorder Boolean        @default(false) @map("allow_backorder")
  allowPreorder  Boolean        @default(false) @map("allow_preorder")
  restockEta     DateTime?      @map("restock_eta") @db.Timestamptz(6)
  createdAt      DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  product        Product        @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  media          VariantMedia[]
  cartItems      CartItem[]
  reservations   Reservation[]

  @@index([productId], map: "idx_variants_product_id")
  @@map("product_variants")
  @@schema("product_catalog")
}

model Category {
  id       String            @id @default(dbgenerated("gen_random_uuid()")) @map("category_id") @db.Uuid
  name     String
  slug     String            @unique
  parentId String?           @map("parent_id") @db.Uuid
  position Int?
  parent   Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id], onUpdate: NoAction)
  children Category[]        @relation("CategoryHierarchy")
  products ProductCategory[]

  @@map("categories")
  @@schema("product_catalog")
}

model ProductCategory {
  productId  String   @map("product_id") @db.Uuid
  categoryId String   @map("category_id") @db.Uuid
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([productId, categoryId])
  @@map("product_categories")
  @@schema("product_catalog")
}

model MediaAsset {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @map("asset_id") @db.Uuid
  storageKey     String          @map("storage_key")
  mime           String
  width          Int?
  height         Int?
  bytes          BigInt?
  altText        String?         @map("alt_text")
  focalX         Int?            @map("focal_x")
  focalY         Int?            @map("focal_y")
  renditions     Json            @default("{}")
  version        Int             @default(1)
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  editorialLooks EditorialLook[]
  productMedia   ProductMedia[]
  variantMedia   VariantMedia[]

  @@map("media_assets")
  @@schema("product_catalog")
}

model ProductMedia {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @map("product_media_id") @db.Uuid
  productId String     @map("product_id") @db.Uuid
  assetId   String     @map("asset_id") @db.Uuid
  position  Int?
  isCover   Boolean    @default(false) @map("is_cover")
  asset     MediaAsset @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("product_media")
  @@schema("product_catalog")
}

model VariantMedia {
  variantId String         @map("variant_id") @db.Uuid
  assetId   String         @map("asset_id") @db.Uuid
  asset     MediaAsset     @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([variantId, assetId])
  @@map("variant_media")
  @@schema("product_catalog")
}

model ProductTag {
  id       String                  @id @default(dbgenerated("gen_random_uuid()")) @map("tag_id") @db.Uuid
  tag      String                  @unique
  kind     String?
  products ProductTagAssociation[]

  @@map("product_tags")
  @@schema("product_catalog")
}

model ProductTagAssociation {
  productId String     @map("product_id") @db.Uuid
  tagId     String     @map("tag_id") @db.Uuid
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tag       ProductTag @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([productId, tagId])
  @@map("product_tag_associations")
  @@schema("product_catalog")
}

model SizeGuide {
  id       String     @id @default(dbgenerated("gen_random_uuid()")) @map("size_guide_id") @db.Uuid
  title    String
  bodyHtml String?    @map("body_html")
  region   RegionEnum
  category String?

  @@map("size_guides")
  @@schema("product_catalog")
}

model EditorialLook {
  id          String                 @id @default(dbgenerated("gen_random_uuid()")) @map("look_id") @db.Uuid
  title       String
  storyHtml   String?                @map("story_html")
  heroAssetId String?                @map("hero_asset_id") @db.Uuid
  publishedAt DateTime?              @map("published_at") @db.Timestamptz(6)
  products    EditorialLookProduct[]
  heroAsset   MediaAsset?            @relation(fields: [heroAssetId], references: [id], onUpdate: NoAction)

  @@map("editorial_looks")
  @@schema("product_catalog")
}

model EditorialLookProduct {
  lookId    String        @map("look_id") @db.Uuid
  productId String        @map("product_id") @db.Uuid
  look      EditorialLook @relation(fields: [lookId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([lookId, productId])
  @@map("editorial_look_products")
  @@schema("product_catalog")
}

enum UserStatus {
  active
  inactive
  blocked

  @@map("user_status_enum")
  @@schema("user_management")
}

enum ProductStatusEnum {
  draft
  published
  scheduled

  @@map("product_status_enum")
  @@schema("product_catalog")
}

enum RegionEnum {
  UK
  US
  EU

  @@map("region_enum")
  @@schema("product_catalog")
}

model ShoppingCart {
  id                   String        @id @default(dbgenerated("gen_random_uuid()")) @map("cart_id") @db.Uuid
  userId               String?       @map("user_id") @db.Uuid
  guestToken           String?       @unique @map("guest_token")
  currency             String?
  reservationExpiresAt DateTime?     @map("reservation_expires_at") @db.Timestamptz(6)
  createdAt            DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  items                CartItem[]
  reservations         Reservation[]
  user                 User?         @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@map("shopping_carts")
  @@schema("cart")
}

model CartItem {
  id                 String         @id @default(dbgenerated("gen_random_uuid()")) @map("cart_item_id") @db.Uuid
  cartId             String         @map("cart_id") @db.Uuid
  variantId          String         @map("variant_id") @db.Uuid
  qty                Int
  unitPriceSnapshot  Decimal        @map("unit_price_snapshot") @db.Decimal(12, 2)
  appliedPromos      Json           @default("[]") @map("applied_promos")
  isGift             Boolean        @default(false) @map("is_gift")
  giftMessage        String?        @map("gift_message")
  cart               ShoppingCart   @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  variant            ProductVariant @relation(fields: [variantId], references: [id], onUpdate: NoAction)

  @@map("cart_items")
  @@schema("cart")
}

model Reservation {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @map("reservation_id") @db.Uuid
  cartId    String         @map("cart_id") @db.Uuid
  variantId String         @map("variant_id") @db.Uuid
  qty       Int
  expiresAt DateTime       @map("expires_at") @db.Timestamptz(6)
  cart      ShoppingCart   @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  variant   ProductVariant @relation(fields: [variantId], references: [id], onUpdate: NoAction)

  @@unique([cartId, variantId])
  @@map("reservations")
  @@schema("cart")
}
