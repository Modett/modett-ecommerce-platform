generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["cart", "product_catalog", "public", "user_management", "order_management", "inventory_management", "fulfillment", "payment_loyalty", "customer_care", "engagement"]
}

model User {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @map("user_id") @db.Uuid
  email          String          @unique
  passwordHash   String?         @map("password_hash")
  phone          String?
  status         UserStatus      @default(active)
  emailVerified  Boolean         @default(false) @map("email_verified")
  phoneVerified  Boolean         @default(false) @map("phone_verified")
  isGuest        Boolean         @default(false) @map("is_guest")
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  shoppingCarts  ShoppingCart[]
  paymentMethods PaymentMethod[]
  socialLogins   SocialLogin[]
  addresses      UserAddress[]
  profile        UserProfile?
  orders         Order[]

  @@map("users")
  @@schema("user_management")
}

model SocialLogin {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @map("social_id") @db.Uuid
  userId         String   @map("user_id") @db.Uuid
  provider       String
  providerUserId String   @unique @map("provider_user_id")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("social_logins")
  @@schema("user_management")
}

model UserAddress {
  id                  String          @id @default(dbgenerated("gen_random_uuid()")) @map("address_id") @db.Uuid
  userId              String          @map("user_id") @db.Uuid
  type                String
  isDefault           Boolean         @default(false) @map("is_default")
  firstName           String?         @map("first_name")
  lastName            String?         @map("last_name")
  company             String?
  addressLine1        String          @map("address_line_1")
  addressLine2        String?         @map("address_line_2")
  city                String
  state               String?
  postalCode          String?         @map("postal_code")
  country             String
  phone               String?
  createdAt           DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  paymentMethods      PaymentMethod[]
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  defaultUserProfiles UserProfile[]   @relation("DefaultAddress")

  @@map("user_addresses")
  @@schema("user_management")
}

model PaymentMethod {
  id                  String        @id @default(dbgenerated("gen_random_uuid()")) @map("payment_method_id") @db.Uuid
  userId              String        @map("user_id") @db.Uuid
  type                String
  brand               String?
  last4               String?
  expMonth            Int?          @map("exp_month")
  expYear             Int?          @map("exp_year")
  billingAddressId    String?       @map("billing_address_id") @db.Uuid
  providerRef         String?       @map("provider_ref")
  isDefault           Boolean       @default(false) @map("is_default")
  createdAt           DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  billingAddress      UserAddress?  @relation(fields: [billingAddressId], references: [id], onUpdate: NoAction)
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  defaultUserProfiles UserProfile[] @relation("DefaultPaymentMethod")

  @@map("payment_methods")
  @@schema("user_management")
}

model UserProfile {
  userId                 String         @id @map("user_id") @db.Uuid
  defaultAddressId       String?        @map("default_address_id") @db.Uuid
  defaultPaymentMethodId String?        @map("default_payment_method_id") @db.Uuid
  prefs                  Json           @default("{}")
  locale                 String?
  currency               String?
  stylePreferences       Json           @default("{}") @map("style_preferences")
  preferredSizes         Json           @default("{}") @map("preferred_sizes")
  defaultAddress         UserAddress?   @relation("DefaultAddress", fields: [defaultAddressId], references: [id], onUpdate: NoAction)
  defaultPaymentMethod   PaymentMethod? @relation("DefaultPaymentMethod", fields: [defaultPaymentMethodId], references: [id], onUpdate: NoAction)
  user                   User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("user_profiles")
  @@schema("user_management")
}

model Product {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @map("product_id") @db.Uuid
  title                 String
  slug                  String                  @unique
  brand                 String?
  shortDesc             String?                 @map("short_desc")
  longDescHtml          String?                 @map("long_desc_html")
  status                ProductStatusEnum       @default(draft)
  publishAt             DateTime?               @map("publish_at") @db.Timestamptz(6)
  countryOfOrigin       String?                 @map("country_of_origin")
  seoTitle              String?                 @map("seo_title")
  seoDescription        String?                 @map("seo_description")
  createdAt             DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime                @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  editorialLookProducts EditorialLookProduct[]
  categories            ProductCategory[]
  media                 ProductMedia[]
  tags                  ProductTagAssociation[]
  variants              ProductVariant[]
  reviews               ProductReview[]

  @@index([publishAt], map: "idx_products_publish_at")
  @@index([status], map: "idx_products_status")
  @@map("products")
  @@schema("product_catalog")
}

model ProductVariant {
  id                 String                 @id @default(dbgenerated("gen_random_uuid()")) @map("variant_id") @db.Uuid
  productId          String                 @map("product_id") @db.Uuid
  sku                String                 @unique
  size               String?
  color              String?
  barcode            String?
  price              Decimal                @db.Decimal(12, 2)
  compareAtPrice     Decimal?               @map("compare_at_price") @db.Decimal(12, 2)
  weightG            Int?                   @map("weight_g")
  dims               Json?
  taxClass           String?                @map("tax_class")
  allowBackorder     Boolean                @default(false) @map("allow_backorder")
  allowPreorder      Boolean                @default(false) @map("allow_preorder")
  restockEta         DateTime?              @map("restock_eta") @db.Timestamptz(6)
  createdAt          DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  cartItems          CartItem[]
  reservations       Reservation[]
  orderItems         OrderItem[]
  product            Product                @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  media              VariantMedia[]
  inventoryStocks    InventoryStock[]
  inventoryTxns      InventoryTransaction[]
  stockAlerts        StockAlert[]
  purchaseOrderItems PurchaseOrderItem[]
  pickupReservations PickupReservation[]
  wishlistItems      WishlistItem[]
  reminders          Reminder[]

  @@index([productId], map: "idx_variants_product_id")
  @@map("product_variants")
  @@schema("product_catalog")
}

model Category {
  id       String            @id @default(dbgenerated("gen_random_uuid()")) @map("category_id") @db.Uuid
  name     String
  slug     String            @unique
  parentId String?           @map("parent_id") @db.Uuid
  position Int?
  parent   Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id], onUpdate: NoAction)
  children Category[]        @relation("CategoryHierarchy")
  products ProductCategory[]

  @@map("categories")
  @@schema("product_catalog")
}

model ProductCategory {
  productId  String   @map("product_id") @db.Uuid
  categoryId String   @map("category_id") @db.Uuid
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([productId, categoryId])
  @@map("product_categories")
  @@schema("product_catalog")
}

model MediaAsset {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @map("asset_id") @db.Uuid
  storageKey     String          @map("storage_key")
  mime           String
  width          Int?
  height         Int?
  bytes          BigInt?
  altText        String?         @map("alt_text")
  focalX         Int?            @map("focal_x")
  focalY         Int?            @map("focal_y")
  renditions     Json            @default("{}")
  version        Int             @default(1)
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  editorialLooks EditorialLook[]
  productMedia   ProductMedia[]
  variantMedia   VariantMedia[]

  @@map("media_assets")
  @@schema("product_catalog")
}

model ProductMedia {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @map("product_media_id") @db.Uuid
  productId String     @map("product_id") @db.Uuid
  assetId   String     @map("asset_id") @db.Uuid
  position  Int?
  isCover   Boolean    @default(false) @map("is_cover")
  asset     MediaAsset @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("product_media")
  @@schema("product_catalog")
}

model VariantMedia {
  variantId String         @map("variant_id") @db.Uuid
  assetId   String         @map("asset_id") @db.Uuid
  asset     MediaAsset     @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([variantId, assetId])
  @@map("variant_media")
  @@schema("product_catalog")
}

model ProductTag {
  id       String                  @id @default(dbgenerated("gen_random_uuid()")) @map("tag_id") @db.Uuid
  tag      String                  @unique
  kind     String?
  products ProductTagAssociation[]

  @@map("product_tags")
  @@schema("product_catalog")
}

model ProductTagAssociation {
  productId String     @map("product_id") @db.Uuid
  tagId     String     @map("tag_id") @db.Uuid
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tag       ProductTag @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([productId, tagId])
  @@map("product_tag_associations")
  @@schema("product_catalog")
}

model SizeGuide {
  id       String     @id @default(dbgenerated("gen_random_uuid()")) @map("size_guide_id") @db.Uuid
  title    String
  bodyHtml String?    @map("body_html")
  region   RegionEnum
  category String?

  @@map("size_guides")
  @@schema("product_catalog")
}

model EditorialLook {
  id          String                 @id @default(dbgenerated("gen_random_uuid()")) @map("look_id") @db.Uuid
  title       String
  storyHtml   String?                @map("story_html")
  heroAssetId String?                @map("hero_asset_id") @db.Uuid
  publishedAt DateTime?              @map("published_at") @db.Timestamptz(6)
  products    EditorialLookProduct[]
  heroAsset   MediaAsset?            @relation(fields: [heroAssetId], references: [id], onUpdate: NoAction)

  @@map("editorial_looks")
  @@schema("product_catalog")
}

model EditorialLookProduct {
  lookId    String        @map("look_id") @db.Uuid
  productId String        @map("product_id") @db.Uuid
  look      EditorialLook @relation(fields: [lookId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([lookId, productId])
  @@map("editorial_look_products")
  @@schema("product_catalog")
}

model ShoppingCart {
  id                   String        @id @default(dbgenerated("gen_random_uuid()")) @map("cart_id") @db.Uuid
  userId               String?       @map("user_id") @db.Uuid
  guestToken           String?       @unique @map("guest_token")
  currency             String?
  reservationExpiresAt DateTime?     @map("reservation_expires_at") @db.Timestamptz(6)
  createdAt            DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  items                CartItem[]
  reservations         Reservation[]
  user                 User?         @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@map("shopping_carts")
  @@schema("cart")
}

model CartItem {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @map("cart_item_id") @db.Uuid
  cartId            String         @map("cart_id") @db.Uuid
  variantId         String         @map("variant_id") @db.Uuid
  qty               Int
  unitPriceSnapshot Decimal        @map("unit_price_snapshot") @db.Decimal(12, 2)
  appliedPromos     Json           @default("[]") @map("applied_promos")
  isGift            Boolean        @default(false) @map("is_gift")
  giftMessage       String?        @map("gift_message")
  cart              ShoppingCart   @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  variant           ProductVariant @relation(fields: [variantId], references: [id], onUpdate: NoAction)

  @@map("cart_items")
  @@schema("cart")
}

model Reservation {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @map("reservation_id") @db.Uuid
  cartId    String         @map("cart_id") @db.Uuid
  variantId String         @map("variant_id") @db.Uuid
  qty       Int
  expiresAt DateTime       @map("expires_at") @db.Timestamptz(6)
  cart      ShoppingCart   @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  variant   ProductVariant @relation(fields: [variantId], references: [id], onUpdate: NoAction)

  @@unique([cartId, variantId])
  @@map("reservations")
  @@schema("cart")
}

enum UserStatus {
  active
  inactive
  blocked

  @@map("user_status_enum")
  @@schema("user_management")
}

enum ProductStatusEnum {
  draft
  published
  scheduled

  @@map("product_status_enum")
  @@schema("product_catalog")
}

enum RegionEnum {
  UK
  US
  EU

  @@map("region_enum")
  @@schema("product_catalog")
}

model Order {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @map("order_id") @db.Uuid
  orderNo            String               @unique @map("order_no")
  userId             String?              @map("user_id") @db.Uuid
  guestToken         String?              @map("guest_token")
  totals             Json                 @default("{}")
  status             OrderStatusEnum      @default(created)
  source             OrderSourceEnum      @default(web)
  currency           String
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  items              OrderItem[]
  addresses          OrderAddress[]
  shipments          OrderShipment[]
  statusHistory      OrderStatusHistory[]
  events             OrderEvent[]
  user               User?                @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  pickupReservations PickupReservation[]

  @@index([userId], map: "idx_orders_user_id")
  @@index([status], map: "idx_orders_status")
  @@index([createdAt], map: "idx_orders_created_at")
  @@map("orders")
  @@schema("order_management")
}

model OrderItem {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @map("order_item_id") @db.Uuid
  orderId         String         @map("order_id") @db.Uuid
  variantId       String         @map("variant_id") @db.Uuid
  qty             Int
  productSnapshot Json           @default("{}") @map("product_snapshot")
  isGift          Boolean        @default(false) @map("is_gift")
  giftMessage     String?        @map("gift_message")
  order           Order          @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  variant         ProductVariant @relation(fields: [variantId], references: [id], onUpdate: NoAction)
  backorder       Backorder?
  preorder        Preorder?
  shipmentItems   ShipmentItem[]

  @@map("order_items")
  @@schema("order_management")
}

model OrderAddress {
  orderId          String @id @map("order_id") @db.Uuid
  billingSnapshot  Json   @default("{}") @map("billing_snapshot")
  shippingSnapshot Json   @default("{}") @map("shipping_snapshot")
  order            Order  @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("order_addresses")
  @@schema("order_management")
}

model OrderShipment {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @map("shipment_id") @db.Uuid
  orderId          String    @map("order_id") @db.Uuid
  carrier          String?
  service          String?
  trackingNo       String?   @map("tracking_no")
  giftReceipt      Boolean   @default(false) @map("gift_receipt")
  pickupLocationId String?   @map("pickup_location_id") @db.Uuid
  shippedAt        DateTime? @map("shipped_at") @db.Timestamptz(6)
  deliveredAt      DateTime? @map("delivered_at") @db.Timestamptz(6)
  order            Order     @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  pickupLocation   Location? @relation(fields: [pickupLocationId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@map("order_shipments")
  @@schema("order_management")
}

model OrderStatusHistory {
  id         BigInt           @id @default(autoincrement()) @map("history_id")
  orderId    String           @map("order_id") @db.Uuid
  fromStatus OrderStatusEnum? @map("from_status")
  toStatus   OrderStatusEnum  @map("to_status")
  changedAt  DateTime         @default(now()) @map("changed_at") @db.Timestamptz(6)
  changedBy  String?          @map("changed_by")
  order      Order            @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("order_status_history")
  @@schema("order_management")
}

model Backorder {
  orderItemId String    @id @map("order_item_id") @db.Uuid
  promisedEta DateTime? @map("promised_eta") @db.Timestamptz(6)
  notifiedAt  DateTime? @map("notified_at") @db.Timestamptz(6)
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("backorders")
  @@schema("order_management")
}

model Preorder {
  orderItemId String    @id @map("order_item_id") @db.Uuid
  releaseDate DateTime? @map("release_date") @db.Timestamptz(6)
  notifiedAt  DateTime? @map("notified_at") @db.Timestamptz(6)
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("preorders")
  @@schema("order_management")
}

model OrderEvent {
  id        BigInt   @id @default(autoincrement()) @map("event_id")
  orderId   String   @map("order_id") @db.Uuid
  eventType String   @map("event_type")
  payload   Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([orderId], map: "idx_order_events_order_id")
  @@index([eventType], map: "idx_order_events_event_type")
  @@map("order_events")
  @@schema("order_management")
}

enum OrderStatusEnum {
  created
  paid
  fulfilled
  partially_returned
  refunded
  cancelled

  @@map("order_status_enum")
  @@schema("order_management")
}

enum OrderSourceEnum {
  web
  mobile

  @@map("order_source_enum")
  @@schema("order_management")
}

enum LocationTypeEnum {
  warehouse
  store

  @@map("location_type_enum")
  @@schema("inventory_management")
}

enum InvTxnReasonEnum {
  order
  rma
  po
  adjustment
  reservation
  release
  damage
  loss
  found
  audit
  shrinkage
  correction

  @@map("inv_txn_reason_enum")
  @@schema("inventory_management")
}

enum StockAlertTypeEnum {
  low_stock
  oos

  @@map("stock_alert_type_enum")
  @@schema("inventory_management")
}

enum PoStatusEnum {
  draft
  sent
  part_received
  received
  closed

  @@map("po_status_enum")
  @@schema("inventory_management")
}

// Fulfillment models

enum ShipmentStatusEnum {
  created
  label_printed
  in_transit
  delivered
  failed

  @@map("shipment_status_enum")
  @@schema("fulfillment")
}

model Shipment {
  shipmentId  String             @id @default(dbgenerated("gen_random_uuid()")) @map("shipment_id") @db.Uuid
  orderId     String             @map("order_id") @db.Uuid
  carrier     String?
  service     String?
  labelUrl    String?            @map("label_url")
  isGift      Boolean            @default(false) @map("is_gift")
  giftMessage String?            @map("gift_message")
  status      ShipmentStatusEnum @default(created)
  shippedAt   DateTime?          @map("shipped_at") @db.Timestamptz(6)
  deliveredAt DateTime?          @map("delivered_at") @db.Timestamptz(6)
  createdAt   DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations (optional)
  // order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  items ShipmentItem[]

  @@index([orderId], map: "idx_fulfillment_shipments_order_id")
  @@index([status], map: "idx_fulfillment_shipments_status")
  @@index([createdAt], map: "idx_fulfillment_shipments_created_at")
  @@map("shipments")
  @@schema("fulfillment")
}

model ShipmentItem {
  shipmentId  String   @map("shipment_id") @db.Uuid
  orderItemId String   @map("order_item_id") @db.Uuid
  qty         Int
  giftWrap    Boolean  @default(false) @map("gift_wrap")
  giftMessage String?  @map("gift_message")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  shipment  Shipment  @relation(fields: [shipmentId], references: [shipmentId], onDelete: Cascade, onUpdate: NoAction)
  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([shipmentId, orderItemId])
  @@map("shipment_items")
  @@schema("fulfillment")
}

// Inventory Management Models
model Location {
  id                 String                 @id @default(dbgenerated("gen_random_uuid()")) @map("location_id") @db.Uuid
  name               String
  type               LocationTypeEnum
  address            Json?
  orderShipments     OrderShipment[]
  inventoryStocks    InventoryStock[]
  inventoryTxns      InventoryTransaction[]
  pickupReservations PickupReservation[]
  appointments       Appointment[]

  @@map("locations")
  @@schema("inventory_management")
}

model InventoryStock {
  variantId         String         @map("variant_id") @db.Uuid
  locationId        String         @map("location_id") @db.Uuid
  onHand            Int            @default(0) @map("on_hand")
  reserved          Int            @default(0)
  lowStockThreshold Int?           @map("low_stock_threshold")
  safetyStock       Int?           @map("safety_stock")
  variant           ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  location          Location       @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@id([variantId, locationId])
  @@map("inventory_stocks")
  @@schema("inventory_management")
}

model InventoryTransaction {
  invTxnId      String           @id @default(dbgenerated("gen_random_uuid()")) @map("inv_txn_id") @db.Uuid
  variantId     String           @map("variant_id") @db.Uuid
  locationId    String           @map("location_id") @db.Uuid
  qtyDelta      Int              @map("qty_delta")
  reason        InvTxnReasonEnum
  referenceType String?          @map("reference_type")
  referenceId   String?          @map("reference_id") @db.Uuid
  createdAt     DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  variant       ProductVariant   @relation(fields: [variantId], references: [id])
  location      Location         @relation(fields: [locationId], references: [id])

  @@map("inventory_transactions")
  @@schema("inventory_management")
}

model StockAlert {
  alertId     String             @id @default(dbgenerated("gen_random_uuid()")) @map("alert_id") @db.Uuid
  variantId   String             @map("variant_id") @db.Uuid
  type        StockAlertTypeEnum
  triggeredAt DateTime           @default(now()) @map("triggered_at") @db.Timestamptz(6)
  resolvedAt  DateTime?          @map("resolved_at") @db.Timestamptz(6)
  variant     ProductVariant     @relation(fields: [variantId], references: [id])

  @@map("stock_alerts")
  @@schema("inventory_management")
}

model Supplier {
  supplierId     String          @id @default(dbgenerated("gen_random_uuid()")) @map("supplier_id") @db.Uuid
  name           String
  leadTimeDays   Int?            @map("lead_time_days")
  contacts       Json            @default("[]")
  purchaseOrders PurchaseOrder[]

  @@map("suppliers")
  @@schema("inventory_management")
}

model PurchaseOrder {
  poId       String              @id @default(dbgenerated("gen_random_uuid()")) @map("po_id") @db.Uuid
  supplierId String              @map("supplier_id") @db.Uuid
  eta        DateTime?           @db.Timestamptz(6)
  status     PoStatusEnum        @default(draft)
  createdAt  DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime            @updatedAt @map("updated_at") @db.Timestamptz(6)
  supplier   Supplier            @relation(fields: [supplierId], references: [supplierId], onDelete: Cascade)
  items      PurchaseOrderItem[]

  @@map("purchase_orders")
  @@schema("inventory_management")
}

model PurchaseOrderItem {
  poId          String         @map("po_id") @db.Uuid
  variantId     String         @map("variant_id") @db.Uuid
  orderedQty    Int            @map("ordered_qty")
  receivedQty   Int            @default(0) @map("received_qty")
  purchaseOrder PurchaseOrder  @relation(fields: [poId], references: [poId], onDelete: Cascade)
  variant       ProductVariant @relation(fields: [variantId], references: [id])

  @@id([poId, variantId])
  @@map("purchase_order_items")
  @@schema("inventory_management")
}

model PickupReservation {
  reservationId String         @id @default(dbgenerated("gen_random_uuid()")) @map("reservation_id") @db.Uuid
  orderId       String         @map("order_id") @db.Uuid
  variantId     String         @map("variant_id") @db.Uuid
  locationId    String         @map("location_id") @db.Uuid
  qty           Int
  expiresAt     DateTime       @map("expires_at") @db.Timestamptz(6)
  order         Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant       ProductVariant @relation(fields: [variantId], references: [id])
  location      Location       @relation(fields: [locationId], references: [id])

  @@map("pickup_reservations")
  @@schema("inventory_management")
}

// Payment & Loyalty Schema
enum PaymentIntentStatusEnum {
  requires_action
  authorized
  captured
  failed
  cancelled

  @@map("payment_intent_status_enum")
  @@schema("payment_loyalty")
}

enum PaymentTxnTypeEnum {
  auth
  capture
  refund
  void

  @@map("payment_txn_type_enum")
  @@schema("payment_loyalty")
}

enum GiftCardTxnTypeEnum {
  issue
  redeem
  refund

  @@map("gift_card_txn_type_enum")
  @@schema("payment_loyalty")
}

enum LoyaltyReasonEnum {
  purchase
  review
  goodwill
  refund

  @@map("loyalty_reason_enum")
  @@schema("payment_loyalty")
}

model PaymentIntent {
  intentId         String                  @id @default(dbgenerated("gen_random_uuid()")) @map("intent_id") @db.Uuid
  orderId          String                  @map("order_id") @db.Uuid
  idempotencyKey   String?                 @unique @map("idempotency_key")
  provider         String
  status           PaymentIntentStatusEnum
  amount           Decimal                 @db.Decimal(12, 2)
  currency         String
  clientSecret     String?                 @map("client_secret")
  createdAt        DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime                @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  transactions     PaymentTransaction[]
  bnplTransactions BnplTransaction[]

  @@map("payment_intents")
  @@schema("payment_loyalty")
}

model PaymentTransaction {
  txnId         String             @id @default(dbgenerated("gen_random_uuid()")) @map("txn_id") @db.Uuid
  intentId      String             @map("intent_id") @db.Uuid
  type          PaymentTxnTypeEnum
  amount        Decimal            @db.Decimal(12, 2)
  status        String
  failureReason String?            @map("failure_reason")
  pspRef        String?            @map("psp_ref")
  createdAt     DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  paymentIntent PaymentIntent      @relation(fields: [intentId], references: [intentId], onDelete: Cascade)

  @@map("payment_transactions")
  @@schema("payment_loyalty")
}

model BnplTransaction {
  bnplId        String         @id @default(dbgenerated("gen_random_uuid()")) @map("bnpl_id") @db.Uuid
  intentId      String?        @map("intent_id") @db.Uuid
  orderId       String?        @map("order_id") @db.Uuid
  provider      String
  plan          Json           @default("{}")
  status        String?
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  paymentIntent PaymentIntent? @relation(fields: [intentId], references: [intentId], onDelete: SetNull)

  @@map("bnpl_transactions")
  @@schema("payment_loyalty")
}

model GiftCard {
  giftCardId     String                @id @default(dbgenerated("gen_random_uuid()")) @map("gift_card_id") @db.Uuid
  code           String                @unique
  initialBalance Decimal               @map("initial_balance") @db.Decimal(12, 2)
  currentBalance Decimal               @map("current_balance") @db.Decimal(12, 2)
  currency       String
  expiresAt      DateTime?             @map("expires_at") @db.Timestamptz(6)
  status         String
  transactions   GiftCardTransaction[]

  @@map("gift_cards")
  @@schema("payment_loyalty")
}

model GiftCardTransaction {
  gcTxnId    String              @id @default(dbgenerated("gen_random_uuid()")) @map("gc_txn_id") @db.Uuid
  giftCardId String              @map("gift_card_id") @db.Uuid
  orderId    String?             @map("order_id") @db.Uuid
  amount     Decimal             @db.Decimal(12, 2)
  type       GiftCardTxnTypeEnum
  createdAt  DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  giftCard   GiftCard            @relation(fields: [giftCardId], references: [giftCardId], onDelete: Cascade)

  @@map("gift_card_transactions")
  @@schema("payment_loyalty")
}

model Promotion {
  promoId    String           @id @default(dbgenerated("gen_random_uuid()")) @map("promo_id") @db.Uuid
  code       String?          @unique
  rule       Json
  startsAt   DateTime?        @map("starts_at") @db.Timestamptz(6)
  endsAt     DateTime?        @map("ends_at") @db.Timestamptz(6)
  usageLimit Int?             @map("usage_limit")
  status     String?
  usages     PromotionUsage[]

  @@map("promotions")
  @@schema("payment_loyalty")
}

model PromotionUsage {
  promoId        String    @map("promo_id") @db.Uuid
  orderId        String    @map("order_id") @db.Uuid
  discountAmount Decimal   @map("discount_amount") @db.Decimal(12, 2)
  promotion      Promotion @relation(fields: [promoId], references: [promoId], onDelete: Cascade)

  @@id([promoId, orderId])
  @@map("promotion_usage")
  @@schema("payment_loyalty")
}

model LoyaltyProgram {
  programId String           @id @default(dbgenerated("gen_random_uuid()")) @map("program_id") @db.Uuid
  name      String
  earnRules Json             @default("{}") @map("earn_rules")
  burnRules Json             @default("{}") @map("burn_rules")
  tiers     Json             @default("[]")
  accounts  LoyaltyAccount[]

  @@map("loyalty_programs")
  @@schema("payment_loyalty")
}

model LoyaltyAccount {
  accountId     String               @id @default(dbgenerated("gen_random_uuid()")) @map("account_id") @db.Uuid
  userId        String               @map("user_id") @db.Uuid
  programId     String               @map("program_id") @db.Uuid
  pointsBalance BigInt               @default(0) @map("points_balance")
  tier          String?
  updatedAt     DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  program       LoyaltyProgram       @relation(fields: [programId], references: [programId], onDelete: Cascade)
  transactions  LoyaltyTransaction[]

  @@map("loyalty_accounts")
  @@schema("payment_loyalty")
}

model LoyaltyTransaction {
  ltxnId      String            @id @default(dbgenerated("gen_random_uuid()")) @map("ltxn_id") @db.Uuid
  accountId   String            @map("account_id") @db.Uuid
  pointsDelta Int               @map("points_delta")
  reason      LoyaltyReasonEnum
  orderId     String?           @map("order_id") @db.Uuid
  createdAt   DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  account     LoyaltyAccount    @relation(fields: [accountId], references: [accountId], onDelete: Cascade)

  @@map("loyalty_transactions")
  @@schema("payment_loyalty")
}

model PaymentWebhookEvent {
  eventId   String   @id @default(dbgenerated("gen_random_uuid()")) @map("event_id") @db.Uuid
  provider  String
  eventType String   @map("event_type")
  eventData Json     @map("event_data")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("payment_webhook_events")
  @@schema("payment_loyalty")
}

// Customer Care Schema
enum TicketSourceEnum {
  email
  chat
  phone

  @@map("ticket_source_enum")
  @@schema("customer_care")
}

enum TicketStatusEnum {
  open
  in_progress
  resolved
  closed

  @@map("ticket_status_enum")
  @@schema("customer_care")
}

enum TicketPriorityEnum {
  low
  medium
  high
  urgent

  @@map("ticket_priority_enum")
  @@schema("customer_care")
}

enum MessageSenderEnum {
  agent
  customer

  @@map("ticket_sender_enum")
  @@schema("customer_care")
}

enum ChatSenderTypeEnum {
  user
  agent

  @@map("chat_sender_type_enum")
  @@schema("customer_care")
}

enum ChatStatusEnum {
  active
  waiting
  ended

  @@map("chat_status_enum")
  @@schema("customer_care")
}

enum RmaTypeEnum {
  return
  exchange
  gift_return

  @@map("rma_type_enum")
  @@schema("customer_care")
}

enum RmaStatusEnum {
  eligibility
  approved
  in_transit
  received
  refunded
  rejected

  @@map("rma_status_enum")
  @@schema("customer_care")
}

enum ItemConditionEnum {
  new
  used
  damaged

  @@map("item_condition_enum")
  @@schema("customer_care")
}

enum ItemDispositionEnum {
  restock
  repair
  discard

  @@map("item_disposition_enum")
  @@schema("customer_care")
}

enum GoodwillTypeEnum {
  store_credit
  discount
  points

  @@map("goodwill_type_enum")
  @@schema("customer_care")
}

enum RepairStatusEnum {
  pending
  in_progress
  completed
  failed
  cancelled

  @@map("repair_status_enum")
  @@schema("customer_care")
}

model SupportTicket {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @map("ticket_id") @db.Uuid
  userId    String?          @map("user_id") @db.Uuid
  orderId   String?          @map("order_id") @db.Uuid
  source    TicketSourceEnum
  subject   String
  status    String
  priority  String?
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  messages  TicketMessage[]
  // feedbacks CustomerFeedback[]

  @@index([userId], map: "idx_support_tickets_user_id")
  @@index([orderId], map: "idx_support_tickets_order_id")
  @@index([status], map: "idx_support_tickets_status")
  @@index([createdAt], map: "idx_support_tickets_created_at")
  @@map("support_tickets")
  @@schema("customer_care")
}

model TicketMessage {
  id        String            @id @default(dbgenerated("gen_random_uuid()")) @map("message_id") @db.Uuid
  ticketId  String            @map("ticket_id") @db.Uuid
  sender    MessageSenderEnum
  body      String
  createdAt DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  ticket    SupportTicket     @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId], map: "idx_ticket_messages_ticket_id")
  @@index([createdAt], map: "idx_ticket_messages_created_at")
  @@map("ticket_messages")
  @@schema("customer_care")
}

model SupportAgent {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @map("agent_id") @db.Uuid
  name         String
  roster       Json          @default("[]")
  skills       Json          @default("[]")
  chatSessions ChatSession[]

  @@map("support_agents")
  @@schema("customer_care")
}

model ChatSession {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @map("session_id") @db.Uuid
  userId    String?       @map("user_id") @db.Uuid
  agentId   String?       @map("agent_id") @db.Uuid
  status    String?
  topic     String?
  priority  String?
  startedAt DateTime      @default(now()) @map("started_at") @db.Timestamptz(6)
  endedAt   DateTime?     @map("ended_at") @db.Timestamptz(6)
  agent     SupportAgent? @relation(fields: [agentId], references: [id], onDelete: SetNull)
  messages  ChatMessage[]

  @@index([userId], map: "idx_chat_sessions_user_id")
  @@index([agentId], map: "idx_chat_sessions_agent_id")
  @@index([startedAt], map: "idx_chat_sessions_started_at")
  @@map("chat_sessions")
  @@schema("customer_care")
}

model ChatMessage {
  id          String             @id @default(dbgenerated("gen_random_uuid()")) @map("message_id") @db.Uuid
  sessionId   String             @map("session_id") @db.Uuid
  senderId    String?            @map("sender_id") @db.Uuid
  senderType  ChatSenderTypeEnum @map("sender_type")
  messageType String?            @map("message_type")
  content     String?
  metadata    Json               @default("{}")
  isAutomated Boolean            @default(false) @map("is_automated")
  createdAt   DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  session     ChatSession        @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId], map: "idx_chat_messages_session_id")
  @@index([createdAt], map: "idx_chat_messages_created_at")
  @@map("chat_messages")
  @@schema("customer_care")
}

model ReturnRequest {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @map("rma_id") @db.Uuid
  orderId     String        @map("order_id") @db.Uuid
  type        RmaTypeEnum
  reason      String?
  status      RmaStatusEnum @default(eligibility)
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  returnItems ReturnItem[]

  @@index([orderId], map: "idx_return_requests_order_id")
  @@index([status], map: "idx_return_requests_status")
  @@map("return_requests")
  @@schema("customer_care")
}

model ReturnItem {
  rmaId         String               @map("rma_id") @db.Uuid
  orderItemId   String               @map("order_item_id") @db.Uuid
  qty           Int
  condition     ItemConditionEnum?
  disposition   ItemDispositionEnum?
  fees          Decimal?             @db.Decimal(12, 2)
  returnRequest ReturnRequest        @relation(fields: [rmaId], references: [id], onDelete: Cascade)

  @@id([rmaId, orderItemId])
  @@map("return_items")
  @@schema("customer_care")
}

model Repair {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @map("repair_id") @db.Uuid
  orderItemId String  @map("order_item_id") @db.Uuid
  notes       String?
  status      String?

  @@index([orderItemId], map: "idx_repairs_order_item_id")
  @@map("repairs")
  @@schema("customer_care")
}

model GoodwillRecord {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @map("goodwill_id") @db.Uuid
  userId    String?          @map("user_id") @db.Uuid
  orderId   String?          @map("order_id") @db.Uuid
  type      GoodwillTypeEnum
  value     Decimal          @db.Decimal(12, 2)
  reason    String?
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([userId], map: "idx_goodwill_records_user_id")
  @@index([orderId], map: "idx_goodwill_records_order_id")
  @@map("goodwill_records")
  @@schema("customer_care")
}

model CustomerFeedback {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @map("feedback_id") @db.Uuid
  userId    String?  @map("user_id") @db.Uuid
  ticketId  String?  @map("ticket_id") @db.Uuid
  orderId   String?  @map("order_id") @db.Uuid
  nps       Int?     @map("nps_score")
  csat      Int?     @map("csat_score")
  comment   String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([orderId], map: "idx_customer_feedback_order_id")
  @@index([userId], map: "idx_customer_feedback_user_id")
  @@index([createdAt], map: "idx_customer_feedback_created_at")
  @@map("customer_feedback")
  @@schema("customer_care")
}

// Engagement Schema
enum ReminderTypeEnum {
  restock
  price_drop

  @@map("reminder_type_enum")
  @@schema("engagement")
}

enum ContactEnum {
  email
  phone

  @@map("contact_enum")
  @@schema("engagement")
}

enum ChannelEnum {
  email
  sms
  whatsapp
  push

  @@map("channel_enum")
  @@schema("engagement")
}

enum ReminderStatusEnum {
  pending
  sent
  unsubscribed

  @@map("reminder_status_enum")
  @@schema("engagement")
}

enum NotificationTypeEnum {
  order_confirm
  shipped
  restock
  review_request
  care_guide
  promo

  @@map("notification_type_enum")
  @@schema("engagement")
}

enum AppointmentTypeEnum {
  stylist
  in_store

  @@map("appointment_type_enum")
  @@schema("engagement")
}

model Wishlist {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @map("wishlist_id") @db.Uuid
  userId      String?        @map("user_id") @db.Uuid
  guestToken  String?        @map("guest_token")
  name        String?
  isDefault   Boolean        @default(false) @map("is_default")
  isPublic    Boolean        @default(false) @map("is_public")
  description String?
  createdAt   DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  items       WishlistItem[]

  @@map("wishlists")
  @@schema("engagement")
}

model WishlistItem {
  wishlistId String         @map("wishlist_id") @db.Uuid
  variantId  String         @map("variant_id") @db.Uuid
  wishlist   Wishlist       @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  variant    ProductVariant @relation(fields: [variantId], references: [id])

  @@id([wishlistId, variantId])
  @@map("wishlist_items")
  @@schema("engagement")
}

model Reminder {
  id        String              @id @default(dbgenerated("gen_random_uuid()")) @map("reminder_id") @db.Uuid
  type      ReminderTypeEnum
  variantId String              @map("variant_id") @db.Uuid
  userId    String?             @map("user_id") @db.Uuid
  contact   ContactEnum
  channel   ChannelEnum
  optInAt   DateTime?           @map("opt_in_at") @db.Timestamptz(6)
  status    ReminderStatusEnum  @default(pending)
  variant   ProductVariant      @relation(fields: [variantId], references: [id])

  @@map("reminders")
  @@schema("engagement")
}

model Notification {
  id          String                @id @default(dbgenerated("gen_random_uuid()")) @map("notification_id") @db.Uuid
  type        NotificationTypeEnum
  channel     ChannelEnum?
  templateId  String?               @map("template_id") @db.Uuid
  payload     Json                  @default("{}")
  status      String?
  scheduledAt DateTime?             @map("scheduled_at") @db.Timestamptz(6)
  sentAt      DateTime?             @map("sent_at") @db.Timestamptz(6)
  error       String?

  @@map("notifications")
  @@schema("engagement")
}

model ProductReview {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @map("review_id") @db.Uuid
  productId String   @map("product_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  rating    Int
  title     String?
  body      String?
  status    String   @default("pending")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_reviews")
  @@schema("engagement")
}

model Appointment {
  id         String              @id @default(dbgenerated("gen_random_uuid()")) @map("appt_id") @db.Uuid
  userId     String              @map("user_id") @db.Uuid
  type       AppointmentTypeEnum
  locationId String?             @map("location_id") @db.Uuid
  startAt    DateTime            @map("start_at") @db.Timestamptz(6)
  endAt      DateTime            @map("end_at") @db.Timestamptz(6)
  notes      String?
  location   Location?           @relation(fields: [locationId], references: [id], onDelete: SetNull)

  @@map("appointments")
  @@schema("engagement")
}

model NewsletterSubscription {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @map("subscription_id") @db.Uuid
  email      String   @unique
  status     String?
  source     String?
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("newsletter_subscriptions")
  @@schema("engagement")
}
